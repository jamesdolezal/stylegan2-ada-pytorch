# Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
#
# NVIDIA CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA CORPORATION is strictly prohibited.

"""Generate images using pretrained network pickle."""

import os
import re
from os.path import join
from typing import List, Optional

import click
import imageio
import numpy as np
import torch
from PIL import Image
from scipy.interpolate import interp1d

import dnnlib
import legacy
from training.networks import EmbeddingGenerator, EmbeddingMappingNetwork

#----------------------------------------------------------------------------

def num_range(s: str) -> List[int]:
    '''Accept either a comma separated list of numbers 'a,b,c' or a range 'a-c' and return as a list of ints.'''

    if os.path.exists(s):
        with open(s, 'r') as f:
            return [int(i) for i in f.read().split('\n')]
    else:
        range_re = re.compile(r'^(\d+)-(\d+)$')
        m = range_re.match(s)
        if m:
            return list(range(int(m.group(1)), int(m.group(2))+1))
        vals = s.split(',')
        return [int(x) for x in vals]

#----------------------------------------------------------------------------

@click.command()
@click.pass_context
@click.option('--network', 'network_pkl', help='Network pickle filename', required=True)
@click.option('--seeds', type=num_range, help='List of random seeds')
@click.option('--start', type=int, help='Starting category for interpolation.')
@click.option('--end', type=int, help='Ending category for interpolation.')
@click.option('--trunc', 'truncation_psi', type=float, help='Truncation psi', default=1, show_default=True)
@click.option('--noise-mode', help='Noise mode', type=click.Choice(['const', 'random', 'none']), default='const', show_default=True)
@click.option('--outdir', help='Where to save the output images', type=str, required=True, metavar='DIR')
@click.option('--linear', help='Interpolate a linear outcome from 0-1', type=bool, metavar='BOOL')
@click.option('--video', help='Save in video (MP4) format. If false, will save side-by-side images.', default=True, show_default=True, type=bool, metavar='BOOL')
@click.option('--steps', help='Number of interpolation steps.', type=int, default=100, show_default=True)
@click.option('--merge', help='Merge images side-by-side.', type=bool, default=False, show_default=True)
def interpolate(
    ctx: click.Context,
    network_pkl: str,
    seeds: Optional[List[int]],
    start: Optional[int],
    end: Optional[int],
    truncation_psi: float,
    noise_mode: str,
    outdir: str,
    linear: bool,
    video: bool,
    steps: int,
    merge: bool,
):
    """Generate images using pretrained network pickle.

    Examples:

    \b
    # Generate curated MetFaces images without truncation (Fig.10 left)
    python generate.py --outdir=out --trunc=1 --seeds=85,265,297,849 \\
        --network=https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/metfaces.pkl

    \b
    # Generate uncurated MetFaces images with truncation (Fig.12 upper left)
    python generate.py --outdir=out --trunc=0.7 --seeds=600-605 \\
        --network=https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/metfaces.pkl

    \b
    # Generate class conditional CIFAR-10 images (Fig.17 left, Car)
    python generate.py --outdir=out --seeds=0-35 --class=1 \\
        --network=https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/cifar10.pkl

    \b
    # Render an image from projected W
    python generate.py --outdir=out --projected_w=projected_w.npz \\
        --network=https://nvlabs-fi-cdn.nvidia.com/stylegan2-ada-pytorch/pretrained/metfaces.pkl
    """

    if steps < 2:
        ctx.fail("Steps must be greater than 1.")

    print('Loading networks from "%s"...' % network_pkl)
    device = torch.device('cuda')
    with dnnlib.util.open_url(network_pkl) as f:
        G = legacy.load_network_pkl(f)['G_ema'].to(device) # type: ignore

    os.makedirs(outdir, exist_ok=True)

    # --- PCs via Delta -------------------------------------------------------

    # PC 0 (seed 141)
    #order = [412, 43, 3, 143, 69, 333, 128, 272, 79, 475, 460, 254, 307, 461, 175, 381, 80, 237, 49, 327, 53, 103, 428, 93, 57, 437, 332, 123, 302, 290, 329, 311, 42, 387, 312, 99, 375, 147, 510, 109, 452, 408, 494, 54, 7, 163, 215, 321, 300, 505, 194, 75, 467, 152, 477, 81, 446, 131, 326, 74, 429, 376, 120, 259, 195, 483, 83, 314, 10, 486, 341, 405, 178, 455, 229, 380, 365, 45, 267, 344, 465, 298, 205, 190, 203, 348, 135, 118, 340, 353, 36, 482, 485, 416, 196, 182, 5, 490, 225, 186, 35, 47, 150, 134, 257, 269, 395, 273, 106, 44, 247, 41, 4, 342, 114, 400, 367, 73, 331, 67, 142, 104, 145, 117, 435, 392, 72, 335, 439, 226, 66, 406, 266, 481, 507, 169, 90, 24, 479, 476, 500, 251, 293, 249, 223, 243, 168, 501, 199, 277, 301, 91, 334, 121, 343, 390, 84, 137, 287, 445, 46, 474, 160, 112, 100, 32, 60, 414, 350, 316, 285, 389, 221, 411, 34, 268, 291, 164, 252, 469, 355, 210, 70, 165, 256, 313, 139, 107, 185, 336, 379, 37, 148, 351, 488, 162, 68, 193, 425, 462, 442, 328, 14, 181, 508, 264, 201, 198, 153, 271, 51, 323, 339, 179, 6, 383, 278, 12, 180, 136, 138, 413, 466, 349, 373, 218, 206, 207, 231, 352, 289, 33, 158, 115, 130, 141, 82, 478, 430, 431, 56, 157, 155, 94, 449, 102, 250, 111, 244, 113, 423, 421, 167, 183, 378, 55, 132, 426, 366, 419, 324, 468, 87, 424, 284, 282, 63, 232, 283, 2, 286, 212, 384, 484, 166, 242, 174, 320, 480, 493, 305, 364, 0, 208, 463, 30, 503, 447, 241, 89, 288, 161, 52, 396, 77, 357, 418, 171, 18, 319, 92, 443, 511, 397, 496, 216, 144, 211, 506, 11, 315, 362, 222, 65, 407, 240, 214, 422, 363, 281, 97, 16, 129, 1, 294, 228, 64, 260, 245, 23, 306, 176, 265, 401, 204, 404, 374, 108, 233, 403, 71, 303, 497, 261, 393, 296, 399, 433, 458, 17, 98, 197, 359, 159, 304, 410, 85, 239, 368, 188, 48, 149, 154, 370, 95, 258, 415, 217, 151, 402, 26, 457, 275, 122, 280, 20, 360, 459, 234, 39, 358, 116, 297, 189, 451, 8, 19, 330, 495, 438, 456, 127, 317, 96, 308, 209, 227, 219, 13, 489, 369, 441, 220, 345, 177, 491, 21, 86, 318, 29, 322, 191, 432, 58, 274, 27, 473, 356, 440, 453, 354, 62, 386, 235, 236, 444, 464, 50, 126, 184, 61, 224, 78, 230, 409, 309, 338, 88, 310, 156, 253, 263, 110, 200, 502, 299, 105, 173, 361, 276, 22, 31, 325, 15, 187, 270, 125, 382, 172, 146, 59, 504, 279, 292, 246, 133, 337, 436, 9, 76, 377, 398, 38, 213, 255, 25, 119, 492, 509, 192, 388, 427, 40, 394, 448, 248, 471, 470, 434, 499, 346, 347, 454, 417, 391, 498, 202, 124, 140, 371, 238, 420, 28, 385, 295, 262, 487, 170, 101, 372, 472]
    #embedding_dims = order[:230]

    # PC 1 (seed 141)
    #order = [394, 165, 414, 203, 477, 75, 272, 510, 437, 74, 494, 381, 321, 3, 53, 259, 169, 194, 375, 475, 49, 237, 80, 163, 312, 147, 143, 117, 273, 359, 12, 5, 335, 42, 69, 428, 7, 290, 44, 178, 79, 327, 405, 505, 416, 186, 93, 254, 36, 460, 215, 343, 333, 109, 332, 461, 340, 344, 380, 446, 91, 118, 225, 257, 365, 106, 205, 302, 45, 485, 226, 103, 199, 313, 507, 311, 57, 267, 175, 482, 121, 462, 483, 301, 128, 83, 298, 314, 387, 35, 429, 10, 395, 99, 142, 43, 392, 68, 300, 326, 479, 481, 152, 467, 145, 70, 401, 185, 56, 247, 353, 406, 249, 150, 81, 408, 190, 100, 486, 134, 348, 367, 490, 455, 264, 114, 41, 171, 221, 350, 400, 488, 390, 452, 201, 430, 141, 269, 508, 160, 445, 233, 307, 46, 366, 465, 252, 435, 500, 34, 469, 54, 131, 130, 342, 351, 251, 412, 195, 137, 379, 153, 55, 198, 240, 411, 4, 331, 67, 336, 220, 341, 476, 196, 439, 104, 503, 474, 291, 211, 355, 277, 32, 120, 289, 271, 376, 181, 396, 72, 212, 287, 123, 334, 65, 90, 243, 158, 102, 135, 349, 278, 389, 162, 501, 148, 16, 66, 443, 193, 457, 266, 94, 223, 413, 2, 286, 468, 47, 281, 77, 61, 228, 426, 222, 231, 206, 139, 397, 329, 122, 384, 449, 459, 176, 442, 73, 418, 230, 64, 229, 37, 182, 108, 424, 232, 245, 52, 107, 155, 407, 19, 60, 129, 87, 306, 111, 323, 268, 497, 436, 239, 98, 473, 256, 115, 315, 216, 33, 303, 96, 283, 164, 24, 495, 458, 378, 373, 30, 218, 242, 352, 214, 427, 85, 374, 51, 493, 82, 275, 293, 21, 260, 404, 265, 280, 26, 213, 363, 207, 383, 86, 39, 447, 423, 217, 112, 166, 328, 18, 358, 425, 177, 393, 285, 6, 89, 97, 284, 95, 235, 258, 197, 183, 58, 59, 276, 17, 295, 403, 463, 297, 149, 506, 110, 319, 484, 305, 441, 419, 113, 364, 136, 357, 71, 76, 1, 317, 410, 219, 491, 23, 448, 451, 386, 370, 250, 320, 167, 356, 504, 132, 431, 146, 241, 22, 157, 204, 330, 263, 14, 174, 84, 189, 168, 224, 140, 402, 324, 192, 279, 509, 304, 480, 288, 200, 415, 255, 209, 292, 466, 179, 409, 11, 299, 0, 187, 347, 173, 308, 294, 25, 161, 151, 318, 377, 511, 78, 438, 138, 432, 124, 144, 63, 371, 127, 310, 362, 191, 236, 487, 368, 48, 456, 421, 338, 261, 126, 464, 244, 172, 382, 440, 208, 496, 345, 282, 13, 399, 339, 156, 388, 20, 159, 50, 270, 154, 274, 88, 92, 420, 422, 322, 391, 116, 385, 337, 478, 361, 253, 316, 180, 498, 489, 29, 296, 502, 453, 15, 9, 470, 369, 433, 492, 227, 238, 133, 234, 309, 188, 28, 360, 454, 125, 27, 444, 38, 372, 246, 202, 248, 354, 62, 325, 170, 499, 101, 262, 398, 434, 119, 472, 346, 40, 31, 184, 417, 210, 471, 8, 105, 450]
    #embedding_dims = order[:380]

    # PC 2 (seed 141)
    #order = [394, 165, 326, 314, 333, 290, 475, 53, 332, 381, 163, 79, 69, 143, 194, 460, 99, 428, 437, 93, 10, 272, 75, 312, 49, 178, 510, 80, 7, 343, 429, 237, 405, 42, 142, 190, 46, 380, 35, 131, 147, 130, 103, 150, 483, 43, 109, 408, 74, 365, 254, 482, 257, 494, 375, 298, 485, 175, 44, 205, 3, 311, 327, 259, 226, 267, 416, 118, 321, 481, 307, 36, 461, 341, 41, 477, 387, 145, 134, 505, 467, 273, 152, 4, 171, 406, 266, 302, 106, 83, 195, 73, 435, 412, 117, 215, 186, 389, 367, 340, 212, 54, 57, 193, 395, 446, 439, 128, 203, 452, 445, 269, 374, 214, 221, 104, 45, 247, 301, 225, 91, 500, 201, 287, 34, 169, 100, 335, 336, 353, 455, 401, 64, 507, 490, 355, 278, 185, 114, 503, 334, 476, 300, 68, 223, 392, 196, 376, 463, 447, 320, 135, 12, 55, 264, 5, 121, 488, 32, 277, 56, 400, 352, 252, 348, 72, 65, 342, 306, 351, 60, 181, 77, 344, 289, 469, 271, 111, 390, 249, 349, 474, 286, 468, 120, 411, 67, 457, 70, 424, 251, 331, 442, 108, 313, 379, 486, 162, 94, 199, 484, 66, 90, 33, 414, 425, 102, 228, 378, 465, 148, 245, 366, 418, 229, 132, 141, 384, 238, 16, 256, 233, 285, 122, 508, 240, 167, 479, 153, 328, 354, 107, 206, 441, 291, 497, 393, 182, 403, 198, 317, 283, 407, 329, 19, 243, 87, 81, 207, 231, 47, 39, 462, 456, 26, 350, 127, 158, 258, 459, 421, 123, 242, 501, 129, 236, 274, 168, 136, 315, 160, 232, 216, 430, 397, 211, 443, 15, 419, 410, 85, 174, 386, 478, 115, 96, 324, 52, 155, 30, 413, 139, 58, 339, 319, 113, 37, 404, 305, 24, 423, 183, 293, 219, 18, 146, 466, 260, 21, 86, 51, 268, 197, 458, 493, 138, 29, 63, 297, 473, 323, 362, 116, 0, 359, 282, 364, 303, 449, 451, 426, 157, 422, 149, 164, 255, 275, 1, 288, 202, 294, 98, 431, 97, 276, 217, 177, 172, 358, 281, 396, 440, 137, 361, 176, 383, 511, 299, 433, 345, 159, 280, 480, 112, 179, 222, 436, 409, 284, 453, 166, 2, 310, 308, 279, 59, 244, 27, 17, 330, 250, 402, 188, 208, 325, 388, 156, 241, 496, 370, 187, 489, 506, 270, 6, 239, 234, 192, 322, 230, 417, 154, 50, 444, 23, 28, 22, 84, 218, 316, 318, 151, 89, 144, 14, 209, 126, 357, 487, 265, 472, 92, 161, 304, 11, 180, 360, 48, 261, 38, 191, 363, 235, 427, 495, 498, 502, 372, 369, 464, 448, 491, 110, 295, 220, 432, 368, 82, 356, 204, 88, 13, 504, 399, 438, 95, 71, 133, 78, 373, 140, 189, 296, 224, 248, 292, 25, 509, 61, 119, 227, 253, 347, 246, 125, 382, 377, 309, 213, 454, 450, 346, 9, 415, 263, 184, 391, 200, 492, 210, 499, 8, 173, 76, 420, 170, 470, 105, 398, 20, 124, 262, 371, 338, 434, 337, 62, 471, 40, 31, 101, 385]
    #embedding_dims = order[:189]
    #embedding_dims = order[:300]

    # PC 3 (seed 141)
    #order = [48, 322, 130, 147, 75, 381, 53, 80, 43, 3, 272, 333, 49, 145, 69, 175, 254, 163, 45, 455, 405, 510, 477, 190, 327, 109, 416, 312, 103, 143, 131, 437, 237, 128, 142, 178, 389, 36, 490, 302, 79, 137, 332, 321, 114, 42, 249, 505, 460, 428, 461, 99, 340, 257, 121, 365, 290, 215, 475, 194, 93, 74, 314, 429, 148, 7, 483, 150, 118, 100, 469, 203, 134, 39, 152, 467, 300, 273, 41, 494, 120, 229, 106, 67, 446, 406, 367, 94, 264, 307, 486, 186, 5, 35, 375, 343, 395, 225, 4, 392, 117, 226, 291, 46, 267, 387, 195, 171, 54, 24, 485, 452, 10, 30, 482, 6, 311, 301, 205, 247, 66, 351, 401, 269, 83, 26, 380, 221, 73, 497, 91, 408, 251, 57, 507, 463, 476, 468, 81, 72, 107, 334, 336, 355, 474, 47, 412, 212, 348, 34, 353, 68, 426, 196, 198, 104, 445, 201, 368, 313, 16, 44, 425, 344, 298, 335, 153, 169, 342, 193, 407, 141, 286, 182, 287, 12, 326, 8, 59, 466, 462, 465, 252, 199, 352, 90, 481, 185, 223, 162, 376, 259, 366, 181, 400, 135, 423, 271, 430, 231, 390, 55, 155, 500, 56, 435, 431, 439, 421, 495, 350, 331, 277, 139, 479, 293, 289, 51, 458, 97, 268, 285, 165, 508, 70, 207, 443, 122, 411, 396, 278, 442, 256, 32, 501, 95, 511, 359, 270, 87, 341, 324, 378, 288, 222, 357, 305, 112, 111, 323, 160, 419, 166, 115, 176, 404, 261, 320, 418, 503, 129, 493, 328, 167, 319, 303, 424, 168, 158, 52, 17, 393, 266, 459, 384, 265, 77, 164, 284, 102, 250, 506, 60, 315, 206, 132, 187, 37, 113, 177, 403, 349, 18, 146, 108, 232, 491, 473, 502, 358, 243, 33, 240, 374, 379, 154, 159, 65, 372, 19, 219, 260, 409, 276, 242, 413, 235, 414, 282, 21, 329, 63, 228, 149, 306, 136, 447, 488, 449, 211, 233, 216, 433, 308, 317, 96, 364, 253, 38, 258, 204, 399, 161, 304, 110, 227, 123, 220, 397, 281, 363, 14, 174, 157, 279, 61, 440, 197, 480, 50, 283, 370, 275, 191, 369, 64, 0, 218, 296, 156, 82, 239, 388, 86, 71, 457, 274, 444, 330, 464, 339, 144, 127, 180, 244, 402, 29, 84, 316, 85, 78, 415, 98, 362, 209, 318, 310, 1, 432, 116, 125, 441, 294, 422, 11, 345, 138, 373, 214, 92, 478, 184, 356, 498, 179, 208, 172, 2, 173, 241, 354, 62, 189, 280, 217, 89, 470, 361, 200, 58, 183, 299, 489, 245, 119, 448, 451, 386, 255, 263, 230, 453, 126, 436, 236, 484, 410, 338, 151, 383, 438, 23, 496, 27, 140, 9, 292, 88, 377, 382, 133, 224, 398, 13, 210, 487, 504, 246, 454, 15, 20, 325, 297, 509, 25, 192, 309, 234, 213, 427, 124, 360, 105, 472, 492, 394, 434, 346, 248, 471, 31, 450, 22, 188, 170, 347, 76, 417, 238, 40, 391, 202, 337, 262, 295, 28, 101, 456, 371, 499, 420, 385]
    #embedding_dims = order[:91]
    #embedding_dims = order[:260]

    # PC 4 (seed 141)
    #order = [197, 406, 479, 395, 273, 272, 405, 69, 510, 35, 109, 375, 194, 80, 461, 152, 49, 332, 178, 477, 467, 175, 45, 163, 475, 53, 75, 257, 392, 355, 408, 36, 312, 121, 335, 494, 446, 3, 333, 348, 437, 428, 321, 7, 120, 381, 145, 77, 311, 147, 340, 314, 10, 118, 143, 365, 237, 290, 41, 99, 416, 460, 225, 300, 243, 247, 334, 254, 93, 327, 83, 482, 186, 131, 302, 74, 264, 429, 43, 150, 5, 503, 267, 106, 57, 103, 481, 483, 79, 287, 260, 226, 452, 70, 46, 91, 117, 500, 353, 389, 42, 367, 259, 326, 129, 344, 343, 190, 485, 505, 455, 488, 203, 44, 387, 251, 142, 486, 341, 128, 351, 277, 269, 378, 60, 435, 501, 376, 215, 507, 206, 68, 64, 195, 252, 65, 135, 94, 162, 342, 104, 320, 199, 256, 307, 331, 349, 400, 249, 323, 66, 490, 229, 278, 136, 130, 352, 289, 212, 81, 4, 153, 232, 171, 12, 266, 196, 67, 123, 468, 423, 228, 298, 443, 0, 141, 205, 379, 469, 56, 134, 413, 286, 139, 34, 233, 37, 380, 107, 90, 439, 221, 231, 271, 474, 445, 306, 54, 32, 324, 63, 297, 476, 180, 265, 198, 449, 396, 185, 165, 411, 390, 493, 496, 242, 201, 72, 181, 132, 193, 161, 55, 223, 169, 102, 412, 330, 52, 19, 328, 403, 350, 160, 425, 179, 285, 240, 336, 207, 424, 100, 508, 138, 506, 108, 442, 402, 122, 182, 282, 59, 339, 291, 217, 155, 275, 73, 459, 329, 463, 430, 358, 421, 114, 397, 30, 345, 219, 158, 149, 24, 250, 51, 462, 431, 115, 222, 301, 188, 13, 6, 87, 211, 113, 497, 268, 47, 157, 96, 177, 164, 415, 491, 317, 318, 191, 33, 239, 119, 86, 111, 166, 357, 216, 95, 315, 364, 293, 112, 281, 319, 1, 84, 16, 303, 148, 2, 137, 440, 214, 399, 374, 384, 14, 151, 401, 18, 362, 404, 366, 310, 189, 453, 422, 255, 296, 144, 258, 168, 82, 284, 338, 227, 361, 26, 280, 495, 436, 295, 116, 480, 373, 241, 48, 274, 98, 17, 313, 419, 218, 407, 270, 127, 294, 288, 176, 89, 173, 235, 444, 466, 369, 418, 354, 511, 360, 478, 23, 292, 359, 363, 61, 393, 220, 230, 126, 208, 447, 283, 304, 456, 11, 261, 21, 386, 458, 38, 174, 71, 29, 245, 308, 85, 426, 451, 427, 183, 414, 473, 159, 370, 209, 50, 125, 464, 97, 146, 305, 441, 27, 78, 299, 457, 244, 368, 253, 438, 309, 156, 154, 465, 184, 371, 470, 487, 337, 172, 246, 279, 383, 39, 167, 92, 236, 204, 484, 356, 325, 432, 448, 9, 498, 110, 133, 409, 58, 263, 410, 22, 489, 504, 276, 316, 433, 62, 213, 88, 450, 382, 234, 509, 322, 248, 224, 15, 187, 388, 472, 192, 210, 398, 377, 140, 492, 434, 499, 25, 200, 372, 31, 347, 8, 346, 76, 417, 502, 124, 20, 170, 394, 101, 471, 105, 262, 40, 385, 391, 238, 420, 454, 28, 202]
    #embedding_dims = order[:305]

    # PC 5 (seed 141)
    #order = [448, 168, 231, 290, 3, 53, 312, 35, 194, 461, 272, 80, 69, 163, 75, 332, 300, 314, 352, 7, 494, 460, 237, 49, 10, 321, 5, 109, 46, 405, 143, 475, 311, 341, 131, 510, 335, 446, 365, 505, 333, 375, 490, 145, 327, 340, 103, 406, 79, 483, 408, 147, 254, 302, 93, 343, 74, 477, 437, 45, 42, 367, 348, 175, 178, 118, 428, 392, 416, 381, 104, 287, 117, 171, 106, 36, 215, 273, 331, 267, 67, 257, 120, 41, 247, 429, 226, 121, 152, 256, 203, 186, 467, 150, 43, 225, 34, 353, 488, 307, 249, 190, 83, 134, 195, 387, 129, 500, 169, 417, 128, 57, 99, 6, 313, 449, 269, 229, 142, 193, 130, 68, 355, 482, 54, 442, 139, 196, 485, 107, 135, 251, 397, 423, 4, 481, 221, 508, 412, 165, 132, 91, 379, 469, 452, 305, 328, 486, 44, 156, 264, 342, 435, 395, 507, 26, 244, 102, 373, 65, 77, 298, 291, 390, 60, 306, 317, 400, 506, 160, 277, 159, 73, 336, 445, 301, 114, 205, 70, 326, 199, 278, 479, 330, 380, 389, 351, 90, 149, 137, 162, 185, 207, 344, 329, 320, 497, 81, 136, 474, 72, 465, 243, 289, 94, 455, 376, 334, 24, 56, 476, 281, 206, 212, 463, 360, 324, 12, 66, 378, 141, 138, 260, 447, 503, 232, 31, 177, 122, 459, 396, 259, 501, 47, 233, 240, 350, 182, 286, 268, 166, 464, 19, 100, 493, 179, 285, 411, 468, 201, 319, 250, 358, 349, 323, 472, 271, 21, 258, 158, 242, 51, 32, 265, 38, 413, 154, 87, 115, 484, 222, 384, 292, 374, 339, 439, 52, 157, 48, 430, 223, 252, 55, 283, 217, 431, 443, 363, 16, 458, 364, 0, 288, 462, 362, 29, 82, 366, 211, 402, 198, 108, 424, 345, 480, 228, 144, 491, 181, 78, 112, 266, 370, 148, 393, 18, 219, 356, 438, 315, 176, 33, 235, 113, 239, 22, 110, 167, 123, 425, 293, 111, 153, 89, 58, 386, 209, 509, 297, 245, 84, 230, 399, 418, 96, 322, 184, 39, 197, 17, 86, 308, 426, 85, 357, 155, 220, 303, 64, 407, 403, 76, 50, 456, 164, 410, 419, 422, 241, 368, 496, 214, 37, 296, 489, 359, 63, 415, 14, 62, 451, 275, 161, 216, 444, 274, 263, 440, 189, 404, 409, 457, 276, 146, 421, 30, 1, 401, 441, 304, 95, 218, 191, 432, 204, 2, 127, 13, 318, 487, 495, 383, 325, 299, 280, 294, 427, 173, 125, 174, 414, 511, 361, 183, 466, 473, 478, 279, 97, 261, 337, 284, 382, 234, 71, 208, 295, 23, 11, 98, 192, 172, 27, 28, 253, 369, 255, 433, 88, 8, 9, 338, 453, 310, 59, 502, 354, 180, 436, 282, 116, 61, 92, 316, 105, 377, 270, 25, 470, 224, 140, 15, 210, 187, 246, 202, 151, 454, 133, 227, 248, 498, 450, 471, 504, 188, 394, 119, 101, 434, 346, 499, 492, 170, 372, 309, 262, 236, 20, 347, 126, 388, 398, 385, 371, 200, 124, 420, 213, 40, 238, 391]
    #embedding_dims = order[:230]
    #embedding_dims = order[:400]

    # --- PCs via raw features ------------------------------------------------
    # PC 0 (seed 141)
    #order = [412, 323, 3, 143, 225, 510, 332, 302, 381, 53, 461, 326, 365, 80, 7, 99, 437, 429, 460, 205, 109, 203, 467, 327, 272, 175, 147, 408, 169, 135, 36, 237, 321, 395, 311, 163, 314, 333, 201, 178, 194, 104, 152, 300, 477, 79, 74, 428, 69, 117, 93, 49, 287, 475, 355, 312, 483, 367, 446, 375, 452, 221, 212, 341, 37, 335, 223, 242, 190, 118, 145, 75, 142, 121, 257, 44, 352, 290, 226, 340, 136, 392, 343, 215, 68, 120, 289, 331, 29, 344, 166, 390, 128, 232, 199, 380, 353, 57, 387, 406, 94, 54, 481, 90, 229, 182, 342, 405, 41, 10, 45, 186, 267, 269, 404, 370, 273, 1, 43, 157, 494, 103, 42, 5, 278, 469, 291, 195, 306, 422, 193, 479, 351, 251, 416, 107, 129, 324, 431, 400, 249, 134, 146, 271, 56, 445, 188, 376, 70, 293, 60, 372, 455, 83, 509, 330, 72, 439, 160, 51, 87, 474, 206, 162, 465, 67, 328, 482, 286, 364, 501, 189, 490, 266, 240, 35, 233, 440, 348, 91, 55, 132, 413, 185, 165, 196, 164, 241, 411, 379, 414, 285, 141, 112, 403, 100, 46, 254, 264, 402, 418, 122, 485, 421, 231, 307, 247, 374, 171, 486, 131, 277, 259, 280, 488, 462, 505, 111, 503, 52, 106, 139, 130, 161, 484, 150, 350, 409, 276, 424, 222, 47, 33, 298, 288, 449, 32, 442, 507, 174, 4, 256, 243, 458, 81, 497, 447, 443, 168, 389, 66, 24, 435, 95, 265, 154, 73, 219, 301, 336, 65, 303, 159, 378, 500, 252, 64, 244, 320, 334, 268, 349, 260, 464, 313, 207, 144, 283, 92, 84, 16, 396, 316, 211, 197, 6, 39, 217, 407, 284, 115, 34, 511, 318, 466, 430, 356, 366, 176, 11, 426, 19, 228, 138, 239, 423, 347, 123, 153, 305, 155, 319, 397, 12, 329, 86, 167, 235, 386, 292, 61, 346, 234, 281, 250, 63, 102, 459, 304, 393, 30, 358, 480, 108, 493, 82, 26, 476, 468, 451, 77, 181, 357, 85, 361, 179, 508, 58, 463, 62, 399, 113, 444, 315, 453, 18, 245, 13, 296, 158, 419, 96, 401, 14, 373, 198, 89, 436, 339, 114, 105, 2, 359, 255, 275, 126, 127, 202, 363, 384, 220, 496, 125, 308, 417, 191, 258, 214, 149, 216, 21, 50, 183, 368, 137, 48, 27, 502, 177, 22, 227, 17, 491, 88, 338, 410, 173, 354, 230, 299, 23, 209, 208, 448, 345, 261, 425, 498, 433, 133, 59, 457, 282, 506, 478, 156, 97, 438, 180, 317, 151, 360, 98, 473, 253, 0, 20, 218, 495, 325, 236, 172, 322, 427, 295, 294, 9, 71, 15, 383, 246, 263, 248, 224, 362, 504, 297, 279, 78, 119, 187, 116, 310, 204, 456, 470, 337, 192, 441, 148, 454, 472, 309, 184, 274, 369, 489, 101, 432, 210, 25, 382, 38, 28, 377, 200, 270, 420, 499, 31, 170, 388, 371, 434, 8, 492, 394, 140, 262, 398, 76, 471, 40, 391, 487, 124, 415, 213, 450, 385, 110, 238]
    #embedding_dims = order[:334]

    # PC 1 (seed 141)
    #order = [243, 321, 74, 64, 75, 143, 437, 93, 510, 381, 163, 332, 221, 203, 178, 267, 392, 150, 107, 254, 42, 194, 169, 315, 355, 455, 53, 41, 79, 477, 365, 326, 131, 43, 490, 237, 495, 475, 272, 333, 34, 405, 106, 69, 80, 494, 336, 452, 290, 486, 46, 118, 36, 103, 446, 3, 49, 57, 109, 483, 99, 311, 45, 312, 35, 460, 181, 340, 500, 257, 327, 225, 508, 390, 302, 429, 482, 147, 130, 94, 375, 306, 134, 461, 273, 44, 335, 352, 505, 428, 67, 10, 367, 7, 104, 463, 380, 247, 175, 400, 408, 348, 231, 259, 406, 251, 165, 468, 467, 300, 269, 128, 331, 226, 195, 314, 421, 145, 5, 91, 244, 359, 501, 186, 160, 474, 401, 370, 476, 291, 341, 121, 152, 264, 90, 497, 439, 389, 117, 184, 411, 190, 66, 162, 469, 182, 449, 68, 304, 387, 73, 275, 378, 142, 287, 205, 462, 447, 395, 149, 83, 70, 441, 353, 54, 120, 140, 196, 19, 233, 59, 342, 211, 416, 465, 301, 419, 207, 283, 278, 507, 481, 485, 256, 307, 413, 393, 329, 313, 199, 350, 240, 298, 2, 232, 108, 266, 220, 442, 87, 344, 112, 30, 343, 11, 423, 265, 334, 114, 328, 260, 77, 404, 215, 219, 12, 27, 479, 410, 161, 438, 197, 249, 139, 506, 258, 250, 193, 31, 81, 185, 153, 135, 51, 223, 177, 268, 210, 201, 132, 32, 286, 316, 288, 16, 96, 324, 457, 373, 371, 58, 212, 357, 293, 33, 436, 127, 158, 374, 24, 361, 168, 1, 435, 6, 339, 424, 4, 466, 285, 480, 418, 503, 65, 351, 271, 171, 349, 176, 242, 113, 489, 229, 155, 129, 484, 310, 217, 445, 379, 323, 55, 368, 407, 37, 71, 456, 440, 141, 21, 209, 47, 396, 213, 164, 102, 137, 338, 426, 206, 289, 319, 110, 376, 166, 119, 279, 146, 459, 115, 281, 354, 198, 491, 111, 252, 386, 487, 167, 388, 183, 358, 72, 277, 412, 383, 308, 317, 458, 63, 95, 430, 60, 122, 214, 86, 305, 403, 216, 364, 397, 235, 14, 157, 136, 172, 18, 443, 84, 303, 431, 151, 192, 245, 488, 85, 363, 255, 39, 123, 241, 23, 493, 464, 156, 496, 320, 473, 189, 174, 154, 89, 100, 385, 0, 50, 384, 263, 138, 97, 296, 253, 261, 26, 236, 125, 297, 280, 191, 295, 230, 82, 124, 432, 284, 425, 218, 402, 347, 25, 415, 224, 325, 294, 318, 78, 52, 282, 98, 56, 362, 472, 28, 382, 159, 148, 239, 511, 337, 40, 38, 238, 427, 204, 222, 345, 356, 22, 444, 309, 299, 188, 187, 179, 394, 8, 422, 234, 17, 499, 509, 330, 144, 9, 451, 366, 270, 450, 369, 92, 322, 409, 391, 200, 126, 76, 414, 478, 101, 61, 180, 248, 398, 433, 420, 454, 228, 372, 498, 417, 48, 133, 276, 116, 448, 399, 29, 292, 227, 88, 470, 246, 262, 453, 492, 208, 170, 13, 274, 504, 202, 360, 502, 471, 105, 15, 346, 20, 377, 62, 434, 173]
    #embedding_dims = order[:338]

    # PC 2 (seed 141)
    #order = [66, 367, 74, 475, 3, 237, 109, 505, 299, 467, 272, 42, 211, 333, 178, 49, 375, 69, 494, 106, 53, 152, 256, 93, 104, 143, 381, 483, 80, 75, 490, 254, 437, 510, 287, 290, 128, 147, 269, 416, 99, 461, 7, 340, 68, 460, 332, 46, 312, 175, 35, 194, 327, 387, 223, 355, 36, 225, 477, 215, 43, 10, 482, 247, 163, 79, 45, 302, 428, 150, 311, 365, 321, 392, 259, 167, 5, 221, 455, 286, 195, 298, 462, 405, 131, 350, 257, 122, 193, 44, 445, 196, 306, 118, 508, 446, 56, 91, 186, 190, 52, 300, 267, 34, 448, 12, 502, 41, 297, 121, 38, 442, 100, 205, 389, 408, 249, 481, 406, 137, 314, 103, 203, 54, 273, 390, 488, 393, 485, 429, 57, 335, 264, 326, 376, 469, 342, 117, 145, 328, 430, 162, 83, 114, 171, 6, 351, 222, 289, 343, 412, 65, 51, 507, 0, 134, 348, 90, 313, 165, 135, 353, 503, 168, 344, 307, 218, 277, 282, 89, 362, 285, 421, 331, 330, 500, 216, 358, 81, 423, 94, 16, 197, 439, 308, 246, 476, 199, 251, 486, 142, 426, 402, 479, 233, 334, 95, 166, 4, 191, 278, 187, 136, 141, 243, 458, 435, 72, 252, 24, 301, 55, 370, 207, 169, 400, 132, 363, 139, 73, 474, 107, 183, 459, 320, 411, 214, 185, 336, 115, 116, 239, 419, 366, 379, 14, 120, 212, 452, 232, 418, 201, 229, 465, 493, 181, 231, 67, 501, 310, 279, 291, 414, 30, 397, 226, 497, 129, 228, 425, 341, 158, 395, 148, 110, 21, 123, 206, 329, 208, 489, 138, 245, 288, 468, 108, 242, 37, 262, 319, 484, 378, 453, 449, 11, 431, 130, 179, 153, 447, 160, 151, 70, 373, 155, 82, 356, 268, 240, 386, 19, 413, 47, 156, 59, 372, 182, 250, 209, 305, 113, 270, 466, 473, 84, 244, 64, 60, 87, 102, 451, 463, 443, 15, 32, 63, 280, 491, 33, 200, 265, 380, 496, 230, 26, 261, 192, 427, 217, 111, 309, 464, 472, 352, 368, 77, 188, 316, 456, 86, 295, 50, 438, 345, 384, 281, 364, 374, 271, 506, 480, 85, 176, 498, 157, 401, 96, 17, 436, 220, 48, 127, 234, 317, 149, 296, 260, 112, 258, 97, 410, 396, 283, 444, 424, 293, 304, 441, 399, 58, 39, 210, 349, 284, 388, 198, 22, 354, 339, 266, 478, 337, 161, 219, 177, 159, 323, 383, 184, 235, 119, 276, 359, 274, 25, 394, 357, 1, 29, 275, 180, 13, 403, 369, 172, 315, 227, 154, 440, 189, 499, 457, 303, 470, 146, 407, 324, 98, 144, 126, 422, 61, 241, 292, 204, 415, 409, 18, 71, 404, 92, 255, 174, 495, 2, 23, 294, 9, 338, 382, 504, 263, 318, 347, 27, 213, 433, 432, 236, 173, 164, 371, 20, 511, 78, 125, 487, 325, 202, 385, 454, 140, 28, 377, 471, 391, 170, 248, 224, 105, 398, 361, 322, 509, 31, 76, 253, 62, 346, 40, 133, 101, 360, 417, 8, 420, 434, 124, 450, 88, 492, 238]
    #embedding_dims = order[:282]

    # PC 3 (seed 141)
    #order = [17, 83, 30, 237, 475, 41, 49, 510, 332, 143, 273, 205, 215, 416, 7, 45, 3, 53, 79, 80, 163, 381, 128, 42, 194, 437, 69, 461, 75, 247, 199, 290, 494, 272, 477, 145, 460, 178, 10, 367, 400, 333, 428, 429, 103, 104, 147, 150, 254, 109, 43, 312, 35, 257, 93, 302, 264, 365, 321, 74, 405, 158, 67, 160, 134, 300, 186, 225, 340, 389, 446, 36, 142, 251, 91, 408, 190, 46, 106, 327, 99, 482, 314, 175, 392, 117, 375, 455, 277, 378, 469, 207, 387, 490, 406, 505, 445, 223, 335, 57, 102, 488, 152, 352, 221, 483, 508, 203, 452, 376, 467, 159, 249, 395, 506, 149, 311, 169, 442, 486, 259, 343, 60, 265, 135, 70, 196, 336, 419, 267, 243, 66, 252, 307, 232, 171, 132, 193, 288, 114, 275, 256, 334, 476, 481, 44, 81, 131, 393, 500, 97, 402, 68, 485, 139, 278, 423, 118, 342, 226, 56, 121, 141, 120, 355, 301, 54, 6, 503, 383, 100, 195, 331, 34, 210, 443, 459, 350, 90, 348, 137, 358, 484, 51, 5, 289, 86, 379, 212, 229, 306, 458, 88, 495, 94, 65, 407, 8, 52, 216, 319, 107, 206, 479, 439, 129, 315, 390, 370, 4, 123, 329, 220, 198, 11, 185, 344, 411, 415, 157, 201, 318, 351, 435, 148, 330, 359, 431, 287, 313, 24, 422, 320, 353, 341, 12, 115, 326, 113, 292, 298, 274, 133, 250, 328, 162, 403, 396, 269, 462, 130, 32, 366, 430, 165, 449, 425, 363, 29, 397, 421, 463, 493, 324, 16, 297, 122, 293, 282, 296, 96, 497, 384, 0, 136, 62, 399, 166, 504, 156, 95, 464, 489, 401, 98, 218, 168, 84, 64, 87, 33, 228, 181, 447, 345, 138, 240, 468, 183, 73, 231, 222, 279, 176, 501, 317, 291, 233, 283, 78, 491, 368, 144, 63, 197, 409, 507, 85, 21, 465, 323, 26, 242, 47, 474, 271, 281, 125, 38, 234, 362, 182, 77, 244, 369, 72, 412, 480, 19, 268, 426, 286, 154, 285, 110, 37, 126, 373, 111, 478, 294, 127, 245, 354, 427, 308, 374, 364, 404, 108, 266, 155, 413, 1, 432, 167, 339, 20, 424, 303, 55, 177, 440, 263, 356, 438, 357, 200, 305, 414, 410, 388, 58, 172, 258, 380, 236, 209, 179, 276, 235, 349, 164, 213, 230, 219, 316, 50, 473, 18, 71, 211, 153, 386, 241, 89, 15, 466, 174, 112, 192, 239, 451, 280, 2, 14, 204, 82, 472, 48, 382, 116, 457, 436, 13, 217, 146, 191, 284, 92, 189, 25, 260, 511, 270, 304, 360, 180, 261, 39, 27, 140, 310, 208, 322, 433, 187, 444, 151, 347, 325, 391, 453, 448, 184, 23, 59, 214, 253, 418, 61, 441, 246, 487, 398, 470, 338, 255, 496, 161, 299, 119, 372, 309, 456, 22, 188, 248, 509, 76, 9, 361, 492, 498, 31, 434, 124, 502, 377, 394, 224, 385, 40, 238, 420, 499, 454, 371, 28, 173, 262, 337, 295, 170, 101, 202, 346, 417, 105, 471, 450, 227]
    #embedding_dims = [order[0]]
    #embedding_dims = order[:276]

    # ----------

    # PC 0 (seed 260)
    order = [256, 109, 419, 257, 7, 327, 79, 365, 332, 272, 333, 243, 510, 143, 75, 163, 150, 302, 91, 80, 460, 178, 237, 461, 194, 312, 53, 359, 314, 300, 229, 437, 290, 49, 477, 3, 455, 428, 387, 273, 196, 94, 117, 301, 10, 381, 36, 225, 42, 254, 467, 376, 103, 215, 26, 69, 475, 142, 474, 190, 99, 181, 395, 494, 41, 375, 335, 405, 507, 380, 307, 490, 479, 392, 93, 145, 147, 205, 175, 83, 74, 459, 348, 114, 186, 118, 389, 500, 68, 352, 378, 193, 408, 141, 340, 430, 267, 44, 283, 321, 342, 152, 503, 106, 107, 247, 505, 195, 50, 468, 317, 129, 285, 298, 35, 66, 249, 167, 128, 476, 386, 76, 231, 259, 258, 34, 201, 501, 63, 445, 343, 367, 46, 481, 5, 87, 397, 344, 131, 264, 372, 355, 415, 189, 406, 226, 452, 81, 127, 320, 192, 134, 281, 169, 294, 354, 411, 217, 508, 443, 84, 270, 311, 493, 469, 310, 223, 409, 442, 6, 420, 497, 278, 209, 446, 350, 232, 120, 241, 13, 482, 43, 233, 160, 211, 483, 485, 221, 269, 277, 286, 56, 495, 121, 47, 197, 413, 45, 336, 431, 424, 449, 95, 182, 403, 416, 60, 235, 242, 488, 171, 326, 38, 480, 77, 165, 251, 429, 57, 108, 148, 266, 19, 260, 289, 341, 295, 219, 351, 252, 4, 396, 23, 390, 113, 86, 146, 85, 218, 222, 25, 54, 116, 463, 262, 240, 185, 486, 33, 104, 313, 73, 39, 447, 401, 370, 32, 16, 330, 265, 357, 136, 328, 67, 203, 12, 292, 70, 212, 423, 96, 464, 102, 112, 334, 122, 291, 65, 450, 361, 153, 135, 100, 422, 72, 421, 506, 90, 137, 55, 130, 412, 162, 478, 293, 287, 138, 236, 52, 388, 173, 263, 111, 363, 404, 51, 157, 139, 358, 465, 244, 324, 315, 297, 385, 451, 435, 17, 149, 253, 462, 353, 484, 164, 61, 448, 220, 441, 323, 284, 268, 399, 159, 329, 198, 337, 384, 382, 0, 275, 304, 331, 27, 82, 228, 202, 427, 364, 319, 110, 11, 400, 398, 115, 132, 133, 126, 374, 204, 140, 18, 199, 426, 349, 318, 89, 425, 491, 383, 213, 179, 123, 271, 499, 303, 407, 410, 457, 239, 155, 207, 174, 168, 154, 37, 58, 88, 466, 360, 325, 30, 24, 183, 439, 71, 309, 187, 176, 248, 214, 92, 238, 184, 339, 436, 454, 414, 276, 418, 250, 177, 40, 274, 64, 511, 206, 322, 279, 282, 97, 456, 166, 440, 288, 31, 191, 200, 306, 366, 15, 308, 379, 261, 296, 345, 2, 368, 246, 124, 432, 28, 356, 498, 188, 158, 362, 371, 210, 438, 373, 22, 496, 470, 369, 208, 280, 458, 144, 98, 180, 21, 216, 29, 48, 1, 299, 472, 59, 230, 402, 161, 393, 156, 125, 502, 170, 453, 172, 305, 394, 444, 14, 473, 316, 234, 492, 434, 377, 489, 433, 9, 119, 255, 338, 347, 105, 245, 504, 62, 151, 391, 487, 224, 8, 78, 20, 101, 227, 417, 509, 346, 471]
    #embedding_dims = order[:350]
    embedding_dims = order[:455]

    # Full interpolation
    #embedding_dims = None

    if not linear:
        if start >= G.c_dim:
            raise ValueError(f"Starting index {start} too large, must be < {G.c_dim}")
        if end >= G.c_dim:
            raise ValueError(f"Ending index {end} too large, must be < {G.c_dim}")
        label_first = torch.zeros([1, G.c_dim], device=device)
        label_first[:, start] = 1
        label_second = torch.zeros([1, G.c_dim], device=device)
        label_second[:, end] = 1
        embedding_first = G.mapping.embed(label_first).cpu().numpy()
        embedding_second = G.mapping.embed(label_second).cpu().numpy()

        # Create the embedding mask
        if isinstance(embedding_dims, list):
            print(f"Interpolating only across {len(embedding_dims)} supplied dimensions.")
            mask = np.ones(embedding_first.shape[1])
            for e in embedding_dims:
                mask[e] = 0
            inv_mask = (~mask.astype(bool)).astype(int)
            embedding_second = embedding_first * mask + embedding_second * inv_mask

        interpolated_embedding = interp1d([0, steps-1], np.vstack([embedding_first, embedding_second]), axis=0)
        G.mapping = EmbeddingMappingNetwork(G.mapping)
        E_G = EmbeddingGenerator(G)

    # Generate images.
    for seed_idx, seed in enumerate(seeds):
        print('Generating image for seed %d (%d/%d) ...' % (seed, seed_idx, len(seeds)))
        z = torch.from_numpy(np.random.RandomState(seed).randn(1, G.z_dim)).to(device)
        if video:
            video_path = join(outdir, f'seed{seed:04d}.mp4')
            video_file = imageio.get_writer(video_path, mode='I', fps=30, codec='libx264', bitrate='16M')
            print (f'Saving optimization progress video "{video_path}"')
        elif merge:
            out_img = Image.new('RGB', (299*steps, 299))
            x_offset = 0

        for interp_idx in range(steps):
            if linear:
                torch_interp = torch.tensor([[interp_idx/steps]]).to(device)
                img = G(z, torch_interp, truncation_psi=truncation_psi, noise_mode=noise_mode)
            else:
                embed = torch.from_numpy(np.expand_dims(interpolated_embedding(interp_idx), axis=0)).to(device)
                img = E_G(z, embed, truncation_psi=truncation_psi, noise_mode=noise_mode)
            img = (img + 1) * (255/2)
            img = img.permute(0, 2, 3, 1).clamp(0, 255).to(torch.uint8)[0].cpu().numpy()
            if video:
                video_file.append_data(img)
            elif merge:
                out_img.paste(Image.fromarray(img), (x_offset, 0))
                x_offset += 299
            else:
                Image.fromarray(img).save(join(outdir, f'seed{seed:04d}-{interp_idx:03d}.png'))

        if video:
            video_file.close()
        elif merge:
            out_img.save(join(outdir, f'seed{seed:04d}.png'))
#----------------------------------------------------------------------------

if __name__ == "__main__":
    interpolate() # pylint: disable=no-value-for-parameter

#----------------------------------------------------------------------------
